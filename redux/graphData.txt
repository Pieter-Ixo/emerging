//From views/collectionDashboard


  useEffect(() => {
    setStoveData([]);
    // setSessionData([]);
    getStoves();
  }, [entitiesData]);

  // useEffect(() => {}, [sessionData]);

  // Get stoves
  async function getStove(deviceId) {
    const res = await getStovebyId(deviceId);

    const tempStoveArray = stoveData;
    tempStoveArray.push(res.data);
    setStoveData(tempStoveArray);
  }

  // get Pellets
  async function getPelletData(deviceId) {
    const res = await getPellets(deviceId);
    const tempPellet = pelletData;
    tempPellet.push(res.data);
    setPelletData(tempPellet);
  }

  function calcPelletsTotal() {
    const tempTotal = pelletTotal;
    for (let i = 0; i < pelletData.length; i++) {
      for (let j = 0; j < pelletData[i].content.length; j++) {
        const date = pelletData[i].content[j].dateTime;
        let foundDate = tempTotal?.content?.findIndex(
          (element) =>
            new Date(element.dateTime).toDateString() ===
            new Date(date).toDateString()
        );

        if (foundDate > -1) {
          tempTotal.content[foundDate].pelletsAmount =
            tempTotal?.content[foundDate].pelletsAmount +
            pelletData[i].content[j].pelletsAmount;
        } else {
          tempTotal?.content.push({
            amount: pelletData[i].content[j].amount,
            currency: pelletData[i].content[j].currency,
            dateTime: pelletData[i].content[j].dateTime,
            id: pelletData[i].content[j].id,
            pelletsAmount: pelletData[i].content[j].pelletsAmount,
            pelletsAmountUnits: pelletData[i].content[j].pelletsAmountUnits,
            telco: pelletData[i].content[j].telco,
            transactionId: pelletData[i].content[j].transactionId,
          });
        }
      }
    }
    if (tempTotal?.content[0]?.pelletsAmount <= 0) tempTotal.content.shift();
    setPelletTotal(tempTotal);
  }

  async function getStoves() {
    const data = entitiesData.map(async (entity) => {
      let sessionDataLocal: any[] = [];
      if (entity.device?.credentialSubject?.id) {
        let tempDeviceId = entity.device.credentialSubject.id;
        tempDeviceId = tempDeviceId.split("id=");
        tempDeviceId = tempDeviceId[1];
        getPelletData(tempDeviceId);
        const SessionRes = await getSessionsData(tempDeviceId);
        sessionDataLocal.push(SessionRes);

        setSessionData(sessionDataLocal);

        getStove(tempDeviceId);
        return sessionDataLocal;
      }
    });

    Promise.all(data).then((data) => {
      const filteredData = data.filter((a) => a);
      if (filteredData.length > 0) {
        let Totals: any[] = [];
        for (let i = 0; i < filteredData[0][0].length; i++) {
          let sum = 0;
          for (let j = 0; j < filteredData.length; j++) {
            sum = sum + filteredData[j][0][i].duration?.total;
          }
          Totals.push({
            count: { avg: 0, total: 0 },
            duration: { avg: 0, total: sum },
            timestamp: filteredData[0][0][i].timestamp,
          });
        }

        setSessionAmount(filteredData.length * filteredData[0][0].length);

        setSessionsTotal(Totals);
      }
      calcPelletsTotal();
    });
  }

  // Get Cooking Sessions
  async function getSessionsData(deviceId) {
    const res = await getCookingSessionsSummary(deviceId);
    return res.data.content;
  }

  // END OF GETTING GRAPH DATA

